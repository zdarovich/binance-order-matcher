// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package service_test is a generated GoMock package.
package service_test

import (
	model "binance-order-matcher/internal/model"
	service "binance-order-matcher/internal/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionAPI is a mock of SubscriptionAPI interface.
type MockSubscriptionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionAPIMockRecorder
}

// MockSubscriptionAPIMockRecorder is the mock recorder for MockSubscriptionAPI.
type MockSubscriptionAPIMockRecorder struct {
	mock *MockSubscriptionAPI
}

// NewMockSubscriptionAPI creates a new mock instance.
func NewMockSubscriptionAPI(ctrl *gomock.Controller) *MockSubscriptionAPI {
	mock := &MockSubscriptionAPI{ctrl: ctrl}
	mock.recorder = &MockSubscriptionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionAPI) EXPECT() *MockSubscriptionAPIMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockSubscriptionAPI) Connect(symbol string) (<-chan struct{}, chan<- struct{}, <-chan service.ApiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", symbol)
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(chan<- struct{})
	ret2, _ := ret[2].(<-chan service.ApiResponse)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Connect indicates an expected call of Connect.
func (mr *MockSubscriptionAPIMockRecorder) Connect(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSubscriptionAPI)(nil).Connect), symbol)
}

// MockBookRepo is a mock of BookRepo interface.
type MockBookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepoMockRecorder
}

// MockBookRepoMockRecorder is the mock recorder for MockBookRepo.
type MockBookRepoMockRecorder struct {
	mock *MockBookRepo
}

// NewMockBookRepo creates a new mock instance.
func NewMockBookRepo(ctrl *gomock.Controller) *MockBookRepo {
	mock := &MockBookRepo{ctrl: ctrl}
	mock.recorder = &MockBookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepo) EXPECT() *MockBookRepoMockRecorder {
	return m.recorder
}

// GetByOrderId mocks base method.
func (m *MockBookRepo) GetByOrderId(orderId string) ([]*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderId", orderId)
	ret0, _ := ret[0].([]*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderId indicates an expected call of GetByOrderId.
func (mr *MockBookRepoMockRecorder) GetByOrderId(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderId", reflect.TypeOf((*MockBookRepo)(nil).GetByOrderId), orderId)
}

// Save mocks base method.
func (m *MockBookRepo) Save(book *model.Book) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", book)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockBookRepoMockRecorder) Save(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBookRepo)(nil).Save), book)
}

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockOrderRepo) GetById(orderId string) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", orderId)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockOrderRepoMockRecorder) GetById(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockOrderRepo)(nil).GetById), orderId)
}

// Save mocks base method.
func (m *MockOrderRepo) Save(order *model.Order) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", order)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockOrderRepoMockRecorder) Save(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrderRepo)(nil).Save), order)
}
